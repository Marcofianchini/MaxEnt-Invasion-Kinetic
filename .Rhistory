axis.title.x = element_text(size = rel(0.9),vjust = 1),
axis.text.x = element_text(size = rel(1.2), vjust = 0.5, hjust=1),
axis.text.y = element_text(size = rel(1.2))) +
guides(color = guide_colourbar(barwidth = rel(10),
label.position = "bottom",
title.position = "left",
title.hjust = 0.5, label.hjust = 0.5,
label.theme = element_text(size = 9, face = 'bold'))) # Customize colorbar
png(paste0(wd,'plots/',expname,'_','presence_weights_vs_distance.png'))
print(p)
dev.off()
p<-ggplot(data.frame(distance = distances_to_nearest, weight = test.a.weight.n, presence_count = presence_count_within_maxDist),
aes(x = distance, y = weight, color = presence_count)) +
geom_point(size = 4) +
geom_hline(yintercept = 1/length(test.a.weight), linetype = 'dashed') +
#xlim(0, db_true+2000) +
scale_alpha(test.a.weight.n,range = c(0.5, 0.95)) +
scale_size(test.a.weight.n,range = c(1, 0.7)) +
scale_color_viridis_c(name = "PP within SAC range", option = "D") +
labs(title = "Background Weights vs. Distance",
x = "Distance to Nearest Presence Point",
y = "Weight") +
theme_bw() +
#make pretty plot
theme(plot.title = element_text(hjust = 0.5, size = 21),
legend.position = "bottom",
legend.title = element_text(size = 12, color = grey(0.1)),
legend.text = element_text(size = 10),
axis.title = element_text(size = 17),
axis.text = element_text(size = 13),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
title = element_text(face = "bold", size = rel(1.1)),
axis.title.y = element_text(size = rel(0.9),vjust = 1),
axis.title.x = element_text(size = rel(0.9),vjust = 1),
axis.text.x = element_text(size = rel(1.2), vjust = 0.5, hjust=1),
axis.text.y = element_text(size = rel(1.2))) +
guides(color = guide_colourbar(barwidth = rel(10),
label.position = "bottom",
title.position = "left",
title.hjust = 0.5, label.hjust = 0.5,
label.theme = element_text(size = 9, face = 'bold'))) # Customize colorbar
print(p)
# Converting presence and absence data to sf objects
rcmed.pres_sf <- vect(rcmed.pres, geom = c("x", "y"), crs = eckertIV)
rcmed.abs_sf <- vect(rcmed.abs, geom = c("x", "y"), crs = eckertIV)
################################################################################################
alpha_pres <- 1
test.p.w <- as.data.frame(terra::extract(envs.final, rcmed.pres_sf, bind=T),geom='XY')[,c('x','y','measurementValue')]
test.p.weight <- enmSdmX::weightByDist(rcmed.pres_sf, maxDist = darange.p.t, alpha = 1)*(test.p.w$measurementValue)
test.p.weight.n <- test.p.weight/sum(test.p.weight)
test.a.w <- as.data.frame(terra::extract(envs.final, rcmed.abs_sf, bind=T),geom='XY')[,c('x','y','measurementValue')]
test.a.weight <- computeBackgroundWeights(rcmed.pres_sf,rcmed.abs_sf, maxDist = darange.p.t, alpha = 1)
test.a.weight.n <- test.a.weight/sum(test.a.weight)
distances_to_nearest <- sapply(1:nrow(rcmed.abs_sf), function(i) {
min(terra::distance(rcmed.pres_sf, rcmed.abs_sf[i, ]))
})
presence_count_within_maxDist <- sapply(1:nrow(rcmed.abs_sf), function(i) {
sum(terra::distance(rcmed.pres_sf, rcmed.abs_sf[i, ]) < darange.p.t)
})
p<-ggplot(data.frame(distance = distances_to_nearest, weight = test.a.weight.n, presence_count = presence_count_within_maxDist),
aes(x = distance, y = weight, color = presence_count)) +
geom_point(size = 4) +
geom_hline(yintercept = 1/length(test.a.weight), linetype = 'dashed') +
#xlim(0, db_true+2000) +
scale_alpha(test.a.weight.n,range = c(0.5, 0.95)) +
scale_size(test.a.weight.n,range = c(1, 0.7)) +
scale_color_viridis_c(name = "PP within SAC range", option = "D") +
labs(title = "Background Weights vs. Distance",
x = "Distance to Nearest Presence Point",
y = "Weight") +
theme_bw() +
#make pretty plot
theme(plot.title = element_text(hjust = 0.5, size = 21),
legend.position = "bottom",
legend.title = element_text(size = 12, color = grey(0.1)),
legend.text = element_text(size = 10),
axis.title = element_text(size = 17),
axis.text = element_text(size = 13),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
title = element_text(face = "bold", size = rel(1.1)),
axis.title.y = element_text(size = rel(0.9),vjust = 1),
axis.title.x = element_text(size = rel(0.9),vjust = 1),
axis.text.x = element_text(size = rel(1.2), vjust = 0.5, hjust=1),
axis.text.y = element_text(size = rel(1.2))) +
guides(color = guide_colourbar(barwidth = rel(10),
label.position = "bottom",
title.position = "left",
title.hjust = 0.5, label.hjust = 0.5,
label.theme = element_text(size = 9, face = 'bold'))) # Customize colorbar
png(paste0(wd,'plots/',expname,'_','background_weights_vs_distance.png'))
print(p)
dev.off()
# do the same plot for presences weights
distances_to_nearest_presence <- sapply(1:nrow(rcmed.pres_sf), function(i) {
distances <- distance(rcmed.pres_sf, rcmed.pres_sf[i, ])
distances[i] <- Inf # Set the distance from the point to itself as Infinity
min(distances)
})
presence_count_within_maxDist_presence <- sapply(1:nrow(rcmed.pres_sf), function(i) {
distances <- distance(rcmed.pres_sf, rcmed.pres_sf[i, ])
sum(distances < darange.p.t) - 1 # Subtract 1 to exclude the point itself
})
p <- ggplot(data.frame(distance = distances_to_nearest_presence, weight = test.p.weight.n, presence_count = presence_count_within_maxDist_presence),
aes(x = distance, y = weight, color = test.p.w$measurementValue)) +
geom_point(size = 4) +
geom_hline(yintercept = 1/length(test.p.weight), linetype = 'dashed') +
scale_alpha(test.p.weight.n,range = c(0.5, 0.95)) +
scale_size(test.p.weight.n,range = c(1, 0.7)) +
scale_color_viridis_c(name = "Abundance value", option = "D") +
labs(title = "Presence Weights vs. Distance",
x = "Distance to Nearest Presence Point",
y = "Weight") +
theme_bw() +
#make pretty plot
theme(plot.title = element_text(hjust = 0.5, size = 21),
legend.position = "bottom",
legend.title = element_text(size = 12, color = grey(0.1)),
legend.text = element_text(size = 10),
axis.title = element_text(size = 17),
axis.text = element_text(size = 13),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
title = element_text(face = "bold", size = rel(1.1)),
axis.title.y = element_text(size = rel(0.9),vjust = 1),
axis.title.x = element_text(size = rel(0.9),vjust = 1),
axis.text.x = element_text(size = rel(1.2), vjust = 0.5, hjust=1),
axis.text.y = element_text(size = rel(1.2))) +
guides(color = guide_colourbar(barwidth = rel(10),
label.position = "bottom",
title.position = "left",
title.hjust = 0.5, label.hjust = 0.5,
label.theme = element_text(size = 9, face = 'bold'))) # Customize colorbar
png(paste0(wd,'plots/',expname,'_','presence_weights_vs_distance.png'))
print(p)
dev.off()
importances
bb<-e.mx@results
opt.auc <- bb %>% filter(auc.val.avg == max(auc.val.avg,na.rm=T)) %>% first()
opt.cbi <- bb %>% filter(cbi.val.avg == max(cbi.val.avg,na.rm=T)) %>% first()
opt.sedi <- bb %>% filter(cv.SEDI.avg == max(cv.SEDI.avg,na.rm=T)) %>% first()
opt.adiff <- bb %>% filter(auc.diff.avg == min(auc.diff.avg,na.rm=T)) %>% first()
opt.or10p <- bb %>% filter(or.10p.avg == min(or.10p.avg, na.rm = T)) %>% first()
opt.aic <- bb %>% filter(AICc == min(AICc,na.rm=T)) %>% first()
mod.seq.auc <- eval.models(e.mx)[[opt.auc$tune.args]]
mod.seq.cbi <- eval.models(e.mx)[[opt.cbi$tune.args]]
mod.seq.sedi <- eval.models(e.mx)[[opt.sedi$tune.args]]
mod.seq.adiff <- eval.models(e.mx)[[opt.adiff$tune.args]]
mod.seq.or10p <- eval.models(e.mx)[[opt.or10p$tune.args]]
mod.seq.aic <- eval.models(e.mx)[[opt.aic$tune.args]]
############################################################################################################
# Initialize an empty list to store the variable importance data
var_importance_list <- list()
var_contribution_list <- list()
# Iterate over each model in the ENMevaluation object
for(i in seq_along(e.mx@models)) {
model <- e.mx@models[[i]]
# Extract variable importance for the current model
var_importance <- model@results[grepl('importance',rownames(model@results)),]
var_contribution <- model@results[grepl('contribution',rownames(model@results)),]
# Add the model identifier (fc and rm values) to the data frame
model_fc <- e.mx@results$fc[i]
model_rm <- e.mx@results$rm[i]
# Convert the data frames to named vectors and add them to the list
var_importance_named <- c(setNames(var_importance, names(var_importance)))
var_contribution_named <- c(setNames(var_contribution, names(var_contribution)))
var_importance_list[[i]] <- var_importance_named
var_contribution_list[[i]] <- var_contribution_named
}
# Convert the lists to data frames, matching variables by name
var_importance_df <- data.frame(fc=e.mx@results$fc,rm=e.mx@results$rm,bind_rows(var_importance_list))
var_contribution_df <- data.frame(fc=e.mx@results$fc,rm=e.mx@results$rm,bind_rows(var_contribution_list))
importances <- vector(length=nlyr(envs.final))
for(i in 3:length(importances)){
print(i)
print(colnames(var_importance_df[i]))
importances[i-2] <- mean(var_importance_df[,i], na.rm=T)
}
importances <- setNames(importances,names(var_importance_df[3:ncol(var_importance_df)]))
importances
names(var_importance_df)
# Extract variable importance for the current model
var_importance <- model@results[grepl('importance',rownames(model@results)),]
var_contribution <- model@results[grepl('contribution',rownames(model@results)),]
var_importance
############################################################################################################
# Initialize an empty list to store the variable importance data
var_importance_list <- list()
var_contribution_list <- list()
# Iterate over each model in the ENMevaluation object
for(i in seq_along(e.mx@models)) {
model <- e.mx@models[[i]]
# Extract variable importance for the current model
var_importance <- model@results[grepl('importance',rownames(model@results)),]
var_contribution <- model@results[grepl('contribution',rownames(model@results)),]
# Add the model identifier (fc and rm values) to the data frame
model_fc <- e.mx@results$fc[i]
model_rm <- e.mx@results$rm[i]
# Convert the data frames to named vectors and add them to the list
var_importance_named <- c(setNames(var_importance, names(var_importance)))
var_contribution_named <- c(setNames(var_contribution, names(var_contribution)))
var_importance_list[[i]] <- var_importance_named
var_contribution_list[[i]] <- var_contribution_named
}
var_importance_list
# extract all the values named 'substrate.permutation.importance' from each list in var_importance_list
prova <- sapply(var_importance_list, function(x) x['substrate.permutation.importance'])
prova
length(prova)
mean(prova)
median(prova)
# Convert the lists to data frames, matching variables by name
var_importance_df <- data.frame(fc=e.mx@results$fc,rm=e.mx@results$rm,bind_rows(var_importance_list))
mean(var_importance_df$substrate.permutation.importance)
mean(var_importance_df$biozone.permutation.importance)
importances <- vector(length=nlyr(envs.final))
for(i in 1:length(importances)){
print(i)
print(colnames(var_importance_df[i]))
importances[i-2] <- mean(var_importance_df[,i], na.rm=T)
}
importances
importances <- vector(length=nlyr(envs.final))
for(i in 1:length(importances)){
print(i)
print(colnames(var_importance_df[i]))
importances[i] <- mean(var_importance_df[,i+2], na.rm=T)
}
importances <- setNames(importances,names(var_importance_df[3:ncol(var_importance_df)]))
importances
names(importances) <- str_remove(names(importances), "\\.importance")
names(importances) <- str_remove(names(importances), "\\.permutation")
importances <- importances[order(importances, decreasing = TRUE)]
# Reshape the data from wide to long format
var_importance_long <- var_importance_df %>%
gather(key = "variable", value = "importance", -fc,-rm) %>%
mutate(variable = str_remove(variable, "\\.importance")) %>%
mutate(variable = str_remove(variable, "\\.permutation"))
var_contribution_long <- var_contribution_df %>%
gather(key = "variable", value = "contribution", -fc,-rm) %>%
mutate(variable = stringr::str_remove(variable, "\\.contribution"))
# Calculate the order of variables based on their mean importance or contribution
var_order_importance <- var_importance_long %>%
group_by(variable) %>%
dplyr::summarise(mean_importance = stats::median(importance, na.rm = TRUE)) %>%
arrange(desc(mean_importance)) %>%
pull(variable)
var_order_contribution <- var_contribution_long %>%
group_by(variable) %>%
summarise(mean_contribution = median(contribution, na.rm = TRUE)) %>%
arrange(desc(mean_contribution)) %>%
pull(variable)
# Extract variable importances for the best model according to each metric in a list: example = model@results[grepl('importance',rownames(model@results)),]
var_importance_by_bestmetrics <- list(
auc = mod.seq.auc@results[grepl('importance',rownames(mod.seq.auc@results)),],
cbi = mod.seq.cbi@results[grepl('importance',rownames(mod.seq.cbi@results)),],
sedi = mod.seq.sedi@results[grepl('importance',rownames(mod.seq.sedi@results)),],
adiff = mod.seq.adiff@results[grepl('importance',rownames(mod.seq.adiff@results)),],
or10p = mod.seq.or10p@results[grepl('importance',rownames(mod.seq.or10p@results)),],
aic = mod.seq.aic@results[grepl('importance',rownames(mod.seq.aic@results)),]
)
# set names to each vector in the list using the names obtained by unique(var_contribution_long$variable)
var_importance_by_bestmetrics_named <- lapply(var_importance_by_bestmetrics, setNames, nm = unique(var_importance_long$variable))
# create a dataframe with a column reporting the metric name
var_importance_by_bestmetrics_named_df <- as.data.frame(var_importance_by_bestmetrics_named)
var_importance_by_bestmetrics_named_df$variable <- rownames(var_importance_by_bestmetrics_named_df)
# Create box plots and add the variable importance data for each metric to the plot as points
annotate.importances <- importances
p1<-ggplot(var_importance_long, aes(x = factor(variable, levels = var_order_importance), y = importance)) +
geom_boxplot(fill = "darkgray", outlier.shape = 19, outlier.size = 0.7) +
# add the variable importance data for or10p to the plot as points
geom_point(data = var_importance_by_bestmetrics_named_df, aes(x = factor(variable, levels = var_order_importance), y = or10p), color = "red", size = 10, shape = 15) +
theme_bw() +
ylim(c(-10,50))+
theme(axis.text.x = element_text(angle = 90, hjust = 0.4, size = 30, face = 'bold'),
axis.text.y = element_text(size = 35),
axis.title = element_text(size = 35,face='bold'),
axis.title.x = element_blank(),
title = element_text(size = 37,face='bold')) +
labs(title = "Variable Permutation Importance", x = "Variable", y = "Permutation Importance")
for(i in seq_along(annotate.importances)){
vr <-as.factor(unique(var_importance_long$variable)[i])
p1 <- p1 + annotate('text',x = vr, y = -10, label = as.character(round(annotate.importances[names(annotate.importances) %in% vr],1)), hjust = 0.5, vjust = 0, size = 13, color = 'black')
# annotate values for best modelL importance
p1 <- p1 + annotate('text',x = vr, y = -7, label = as.character(round(var_importance_by_bestmetrics_named_df$or10p[i],1)), hjust = 0.5, vjust = 0, size = 12, color = 'red')
}
png(paste0(wd,'plots/',expname,'_',"variable_permutation_importance.png"),width = 1600, height = 900)
print(p1)
dev.off()
print(p1)
sum(importances)
median(var_importance_df$mean_po4.permutation.importance)
mean(var_importance_df$mean_po4.permutation.importance)
importances <- vector(length=nlyr(envs.final))
for(i in 1:length(importances)){
print(i)
print(colnames(var_importance_df[i]))
importances[i] <- median(var_importance_df[,i+2], na.rm=T)
}
importances <- setNames(importances,names(var_importance_df[3:ncol(var_importance_df)]))
names(importances) <- str_remove(names(importances), "\\.importance")
names(importances) <- str_remove(names(importances), "\\.permutation")
importances <- importances[order(importances, decreasing = TRUE)]
# Reshape the data from wide to long format
var_importance_long <- var_importance_df %>%
gather(key = "variable", value = "importance", -fc,-rm) %>%
mutate(variable = str_remove(variable, "\\.importance")) %>%
mutate(variable = str_remove(variable, "\\.permutation"))
var_contribution_long <- var_contribution_df %>%
gather(key = "variable", value = "contribution", -fc,-rm) %>%
mutate(variable = stringr::str_remove(variable, "\\.contribution"))
# Calculate the order of variables based on their mean importance or contribution
var_order_importance <- var_importance_long %>%
group_by(variable) %>%
dplyr::summarise(mean_importance = stats::median(importance, na.rm = TRUE)) %>%
arrange(desc(mean_importance)) %>%
pull(variable)
var_order_contribution <- var_contribution_long %>%
group_by(variable) %>%
summarise(mean_contribution = median(contribution, na.rm = TRUE)) %>%
arrange(desc(mean_contribution)) %>%
pull(variable)
# Extract variable importances for the best model according to each metric in a list: example = model@results[grepl('importance',rownames(model@results)),]
var_importance_by_bestmetrics <- list(
auc = mod.seq.auc@results[grepl('importance',rownames(mod.seq.auc@results)),],
cbi = mod.seq.cbi@results[grepl('importance',rownames(mod.seq.cbi@results)),],
sedi = mod.seq.sedi@results[grepl('importance',rownames(mod.seq.sedi@results)),],
adiff = mod.seq.adiff@results[grepl('importance',rownames(mod.seq.adiff@results)),],
or10p = mod.seq.or10p@results[grepl('importance',rownames(mod.seq.or10p@results)),],
aic = mod.seq.aic@results[grepl('importance',rownames(mod.seq.aic@results)),]
)
# set names to each vector in the list using the names obtained by unique(var_contribution_long$variable)
var_importance_by_bestmetrics_named <- lapply(var_importance_by_bestmetrics, setNames, nm = unique(var_importance_long$variable))
# create a dataframe with a column reporting the metric name
var_importance_by_bestmetrics_named_df <- as.data.frame(var_importance_by_bestmetrics_named)
var_importance_by_bestmetrics_named_df$variable <- rownames(var_importance_by_bestmetrics_named_df)
# Create box plots and add the variable importance data for each metric to the plot as points
annotate.importances <- importances
p1<-ggplot(var_importance_long, aes(x = factor(variable, levels = var_order_importance), y = importance)) +
geom_boxplot(fill = "darkgray", outlier.shape = 19, outlier.size = 0.7) +
# add the variable importance data for or10p to the plot as points
geom_point(data = var_importance_by_bestmetrics_named_df, aes(x = factor(variable, levels = var_order_importance), y = or10p), color = "red", size = 10, shape = 15) +
theme_bw() +
ylim(c(-10,50))+
theme(axis.text.x = element_text(angle = 90, hjust = 0.4, size = 30, face = 'bold'),
axis.text.y = element_text(size = 35),
axis.title = element_text(size = 35,face='bold'),
axis.title.x = element_blank(),
title = element_text(size = 37,face='bold')) +
labs(title = "Variable Permutation Importance", x = "Variable", y = "Permutation Importance")
for(i in seq_along(annotate.importances)){
vr <-as.factor(unique(var_importance_long$variable)[i])
p1 <- p1 + annotate('text',x = vr, y = -10, label = as.character(round(annotate.importances[names(annotate.importances) %in% vr],1)), hjust = 0.5, vjust = 0, size = 13, color = 'black')
# annotate values for best modelL importance
p1 <- p1 + annotate('text',x = vr, y = -7, label = as.character(round(var_importance_by_bestmetrics_named_df$or10p[i],1)), hjust = 0.5, vjust = 0, size = 12, color = 'red')
}
png(paste0(wd,'plots/',expname,'_',"variable_permutation_importance.png"),width = 1600, height = 900)
print(p1)
dev.off()
print(p1)
cite(package='terra')
cite('terra')
citation(package='terra')
###############################################
###############################################
###############################################
nm <- 'substrate'
substrate_legend <-read.csv(paste0(wd,'results/',expname,'_','substrate_legend.csv'))
substrate_legend$category[11]<- 'Fine or Sandy mud or Muddy sand' # shorten the name to fit the plot
a<- readRDS(paste0(wd,'results/',expname,'_','allresponses_',nm,'.RDS'))
bestpoint.OR10p<-as.data.frame(dismo::response(e.mx@models[[bestopt$tune.args]],var=nm,range = 'pa',expand=0))
names(bestpoint.OR10p)<-c('V1','p')
# Each data frame should have two columns, for x and y values
df<-lapply(a, function(x) as.data.frame(x))
# Combine the dataframes together, adding an id column to identify them
df_combined <- dplyr::bind_rows(df, .id = "id")
# keep only the relevant substrates
df_combined<-df_combined[!df_combined$V1 %in% c(1),]
bestpoint.OR10p<-bestpoint.OR10p[!bestpoint.OR10p$V1 %in% c(1),]
p <- ggplot(df_combined, aes(x = as.factor(V1), y = p)) +
geom_violin(color = "black",fill = blues9[5], alpha = 0.55) + # Using the merged dataframe directly
geom_point(data = as.data.frame(bestpoint.OR10p), aes(x = as.factor(V1), y = p), color = 'red', size = 5) + # Add the best point
labs(
title = paste0(extended.names[nm], ' (importance: ', round(bestmod@results[paste0(nm,'.permutation.importance'),],2),')'),    # Add a title
#x = paste0(nm,' [ ',vunit[nm],' ]'),  # Add x-axis label
y = "Occurrence probability"   # Add y-axis label
) +
ylim(c(0.1,1)) +
theme_minimal() +
theme(
axis.text.x = element_text( size = 38, face = 'bold'),
axis.text.y = element_text(size = 38),
axis.title = element_text(size = 37,face='bold'),
axis.title.x = element_blank(),
title = element_text(size = 38,face='bold')
) + scale_x_discrete(labels = str_wrap(substrate_legend$category[2:length(substrate_legend$category)], width = 4 ))
png(paste0(wd,'plots/',expname,'_',nm,'.png'),width = 1600, height = 900)
print(p)
dev.off()
p <- ggplot(df_combined, aes(x = as.factor(V1), y = p)) +
geom_violin(color = "black",fill = blues9[5], alpha = 0.55) + # Using the merged dataframe directly
geom_point(data = as.data.frame(bestpoint.OR10p), aes(x = as.factor(V1), y = p), color = 'red', size = 5) + # Add the best point
labs(
title = paste0(extended.names[nm], ' (importance: ', round(bestmod@results[paste0(nm,'.permutation.importance'),],2),')'),    # Add a title
#x = paste0(nm,' [ ',vunit[nm],' ]'),  # Add x-axis label
y = "Occurrence probability"   # Add y-axis label
) +
ylim(c(0.1,1)) +
theme_minimal() +
theme(
axis.text.x = element_text( size = 38, face = 'bold'),
axis.text.y = element_text(size = 38),
axis.title = element_text(size = 37,face='bold'),
axis.title.x = element_blank(),
title = element_text(size = 38,face='bold')
) + scale_x_discrete(labels = str_wrap(substrate_legend$category[2:length(substrate_legend$category)], width = 3.5))
png(paste0(wd,'plots/',expname,'_',nm,'.png'),width = 1600, height = 900)
print(p)
dev.off()
p <- ggplot(df_combined, aes(x = as.factor(V1), y = p)) +
geom_violin(color = "black",fill = blues9[5], alpha = 0.55) + # Using the merged dataframe directly
geom_point(data = as.data.frame(bestpoint.OR10p), aes(x = as.factor(V1), y = p), color = 'red', size = 5) + # Add the best point
labs(
title = paste0(extended.names[nm], ' (importance: ', round(bestmod@results[paste0(nm,'.permutation.importance'),],2),')'),    # Add a title
#x = paste0(nm,' [ ',vunit[nm],' ]'),  # Add x-axis label
y = "Occurrence probability"   # Add y-axis label
) +
ylim(c(0.1,1)) +
theme_minimal() +
theme(
axis.text.x = element_text( size = 38, face = 'bold'),
axis.text.y = element_text(size = 38),
axis.title = element_text(size = 37,face='bold'),
axis.title.x = element_blank(),
title = element_text(size = 38,face='bold')
) + scale_x_discrete(labels = str_wrap(substrate_legend$category[2:length(substrate_legend$category)], width = 3 ))
png(paste0(wd,'plots/',expname,'_',nm,'.png'),width = 1600, height = 900)
print(p)
dev.off()
p <- ggplot(df_combined, aes(x = as.factor(V1), y = p)) +
geom_violin(color = "black",fill = blues9[5], alpha = 0.55) + # Using the merged dataframe directly
geom_point(data = as.data.frame(bestpoint.OR10p), aes(x = as.factor(V1), y = p), color = 'red', size = 5) + # Add the best point
labs(
title = paste0(extended.names[nm], ' (importance: ', round(bestmod@results[paste0(nm,'.permutation.importance'),],2),')'),    # Add a title
#x = paste0(nm,' [ ',vunit[nm],' ]'),  # Add x-axis label
y = "Occurrence probability"   # Add y-axis label
) +
ylim(c(0.1,1)) +
theme_minimal() +
theme(
axis.text.x = element_text( size = 34, face = 'bold'),
axis.text.y = element_text(size = 38),
axis.title = element_text(size = 37,face='bold'),
axis.title.x = element_blank(),
title = element_text(size = 38,face='bold')
) + scale_x_discrete(labels = str_wrap(substrate_legend$category[2:length(substrate_legend$category)], width = 4 ))
png(paste0(wd,'plots/',expname,'_',nm,'.png'),width = 1600, height = 900)
print(p)
dev.off()
p <- ggplot(df_combined, aes(x = as.factor(V1), y = p)) +
geom_violin(color = "black",fill = blues9[5], alpha = 0.55) + # Using the merged dataframe directly
geom_point(data = as.data.frame(bestpoint.OR10p), aes(x = as.factor(V1), y = p), color = 'red', size = 5) + # Add the best point
labs(
title = paste0(extended.names[nm], ' (importance: ', round(bestmod@results[paste0(nm,'.permutation.importance'),],2),')'),    # Add a title
#x = paste0(nm,' [ ',vunit[nm],' ]'),  # Add x-axis label
y = "Occurrence probability"   # Add y-axis label
) +
ylim(c(0.1,1)) +
theme_minimal() +
theme(
axis.text.x = element_text( size = 32, face = 'bold'),
axis.text.y = element_text(size = 38),
axis.title = element_text(size = 37,face='bold'),
axis.title.x = element_blank(),
title = element_text(size = 38,face='bold')
) + scale_x_discrete(labels = str_wrap(substrate_legend$category[2:length(substrate_legend$category)], width = 4 ))
png(paste0(wd,'plots/',expname,'_',nm,'.png'),width = 1600, height = 900)
print(p)
dev.off()
substrate_legend$category[10]<- 'Coral. Platform' # shorten the name to fit the plot
a<- readRDS(paste0(wd,'results/',expname,'_','allresponses_',nm,'.RDS'))
bestpoint.OR10p<-as.data.frame(dismo::response(e.mx@models[[bestopt$tune.args]],var=nm,range = 'pa',expand=0))
names(bestpoint.OR10p)<-c('V1','p')
# Each data frame should have two columns, for x and y values
df<-lapply(a, function(x) as.data.frame(x))
# Combine the dataframes together, adding an id column to identify them
df_combined <- dplyr::bind_rows(df, .id = "id")
# keep only the relevant substrates
df_combined<-df_combined[!df_combined$V1 %in% c(1),]
bestpoint.OR10p<-bestpoint.OR10p[!bestpoint.OR10p$V1 %in% c(1),]
p <- ggplot(df_combined, aes(x = as.factor(V1), y = p)) +
geom_violin(color = "black",fill = blues9[5], alpha = 0.55) + # Using the merged dataframe directly
geom_point(data = as.data.frame(bestpoint.OR10p), aes(x = as.factor(V1), y = p), color = 'red', size = 5) + # Add the best point
labs(
title = paste0(extended.names[nm], ' (importance: ', round(bestmod@results[paste0(nm,'.permutation.importance'),],2),')'),    # Add a title
#x = paste0(nm,' [ ',vunit[nm],' ]'),  # Add x-axis label
y = "Occurrence probability"   # Add y-axis label
) +
ylim(c(0.1,1)) +
theme_minimal() +
theme(
axis.text.x = element_text( size = 32, face = 'bold'),
axis.text.y = element_text(size = 38),
axis.title = element_text(size = 37,face='bold'),
axis.title.x = element_blank(),
title = element_text(size = 38,face='bold')
) + scale_x_discrete(labels = str_wrap(substrate_legend$category[2:length(substrate_legend$category)], width = 4 ))
png(paste0(wd,'plots/',expname,'_',nm,'.png'),width = 1600, height = 900)
print(p)
dev.off()
file.edit(paste0(wd,'scripts/','improved_Stationarity_function.R'))
